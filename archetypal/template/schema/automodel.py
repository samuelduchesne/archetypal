# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2023-09-18T16:27:42+00:00

from __future__ import annotations

from typing import List

from pydantic import UUID4, BaseModel, Field, confloat, conint


class MaterialBase(BaseModel):
    id: UUID4 = Field(..., title='Object ID')
    Conductivity: confloat(ge=0.0, le=5.0) = Field(
        ...,
        description="Thermal conductivity 'k', in W/(m*K) of material",
        title='Thermal Conductivity',
    )
    SpecificHeat: confloat(ge=100.0, le=2000.0) = Field(
        ...,
        description="Specific Heat 'C_p', in J/(kg*K) of material",
        title='Specific Heat',
    )
    Density: confloat(ge=0.0, le=10000.0) = Field(
        ..., description="Density 'rho', in kg/m^3 of material", title='Density'
    )


class MaterialLayer(BaseModel):
    id: UUID4 = Field(..., title='Object ID')
    Thickness: confloat(ge=0.003) = Field(
        ...,
        description='Thickness of this layer',
        examples=[0.01, 0.05, 0.006],
        title='Thickness',
    )
    Material: MaterialBase = Field(
        ..., description='Material used in this layer.', title='Material'
    )


class UmiListMaterialLayer(BaseModel):
    id: UUID4 = Field(..., title='Object ID')
    objects: List[MaterialLayer] = Field(..., title='Objects')


class Construction(BaseModel):
    id: UUID4 = Field(..., title='Object ID')
    Layers: UmiListMaterialLayer = Field(
        ...,
        description='The list of Material Layers which define this construction',
        title='Material Layers',
    )


class ConstructionSet(BaseModel):
    id: UUID4 = Field(..., title='Object ID')
    Partition: Construction = Field(
        ...,
        description='Construction assembly for interior partition walls;used to divide Perimeter and Core Zones.',
        title='Partition Wall',
    )
    Roof: Construction = Field(
        ..., description='Construction assembly for roof', title='Parition Wall'
    )
    Ground: Construction = Field(
        ..., description='Construction assembly for ground', title='Ground'
    )
    Slab: Construction = Field(
        ..., description='Construction assembly for slabs', title='Slab'
    )
    Wall: Construction = Field(
        ...,
        description='Construction assembly for exterior walls',
        title='Exterior Wall',
    )


class Zone(BaseModel):
    id: UUID4 = Field(..., title='Object ID')
    DaylightWorkplaneHeight: confloat(ge=0.0) = Field(
        ...,
        description='Offset for workplane height in daylight simulations',
        examples=[0.8, 0.3],
        title='Daylight Workplane Height',
    )
    Constructions: ConstructionSet = Field(
        ...,
        description="Assembly definitions for the zone's envelope, i.e. exterior walls, partition walls, etc.",
    )


class Template(BaseModel):
    id: UUID4 = Field(..., title='Object ID')
    Perimeter: Zone = Field(
        ..., description='Zone definition for Perimeter zone', title='Perimeter Zone'
    )
    Core: Zone = Field(
        ..., description='Zone definition for Core zone', title='Core Zone'
    )
    YearFrom: conint(ge=1800) = Field(
        ...,
        description='Start of range years for which this UMI Template is applicable.',
        title='Year From',
    )
    YearTo: conint(ge=1800) = Field(
        ...,
        description='End of range years for which this UMI Template is applicable.',
        title='Year To',
    )
    Country: str = Field(
        ...,
        description='Country of Origin for the Template',
        examples=['USA', 'UK'],
        title='Country of Origin',
    )


class UmiListTemplate(BaseModel):
    id: UUID4 = Field(..., title='Object ID')
    objects: List[Template] = Field(..., title='Objects')


class UmiTemplateLibrary(BaseModel):
    id: UUID4 = Field(..., title='Object ID')
    Templates: UmiListTemplate = Field(
        ..., description='A list of UMI Templates in the library', title='UMI Templates'
    )
