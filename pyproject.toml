[tool.poetry]
name = "archetypal"
version = "2.18.9"
description = "Retrieve, construct, simulate, convert and analyse building archetypes"
authors = ["Samuel Letellier-Duchesne <samuelduchesne@me.com>"]
license = "MIT License"
readme = "README.md"
packages = [
    { include = "archetypal", from = "." },
    { include = "geomeppy", from = "geomeppy" },
]

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
networkx = "<3"
eppy = "^0.5.63"
matplotlib = ">=3.4,<4.0"
pycountry = "^24.6.1"
scikit-learn = "^1.5.0"
pandas = ">=2.0.3"
tqdm = "^4.66.4"
click = "^8.1.7"
sigfig = "^1.3.3"
requests = "^2.32.3"
coolprop = "^6.6.0"
energy_pandas = "^0.4.1"
validator-collection = "^1.5.0"
pydantic-settings = "^2.3.2"
path = ">=17.1.0"  # fix an issue with Path.copy returning a str instead of a Path object
numpy = [
    {version = "^2.0.2", python = "<=3.9"},
    {version = "^2.1.1", python = "3.10"}
]

# geomeppy.dependencies
shapely = "^2.0.6"
esoreader = "^1.2.3"
packaging = "^24.1"
pyclipper = "^1.3.0.post5"
pypoly2tri = "^0.0.3"
six = "^1.16.0"
tomli = "^2.0.1"
transforms3d = "^0.4.1"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
pytest-xdist = "^3.6.1"
pytest-mock = "^3.14.0"
tox = "^4.19.0"
pre-commit = "^3.8.0"
pyright = "^1.1.403"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.3.7"
sphinx-rtd-theme = "^2.0.0"
recommonmark = "^0.7.1"
sphinx-click = "^6.0.0"
autodoc-pydantic = "^2.2.0"
sphinx-autobuild = "^2024.4.16"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
archetypal = "archetypal.cli:cli"

[tool.pytest.ini_options]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow that require EnergyPlus or long processing"
]

[tool.ruff]
target-version = "py39"
line-length = 120
fix = true
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    # "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E",
    "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
    # Too Complex
    "C901",
    # raise-vanilla-args
    "TRY003",
    # Checks for uses of isinstance and issubclass that take a tuple of types for comparison.
    "UP038",
    # Python builtin is shadowed by class attribute {name} from {row}
    "A003"
]
exclude = ["tests/input_data/*", "docker/trnsidf/*", "geomeppy"]

[tool.ruff.format]
preview = true

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["archetypal"]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.lint]
allowed-confusables = ["ρ"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
